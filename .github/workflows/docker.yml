name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: gabrieldorodrigues/ci-cd-calculator
  DOCKER_TAG: latest

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linter
        run: flake8 src/app.py flask_app.py

      - name: Run unit tests
        run: pytest src/test_app.py -v

      - name: Run Flask API tests
        run: pytest test_flask_app.py -v

  docker-test:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build test Docker image
        run: |
          docker build -f Dockerfile.test -t ci-cd-calculator:test .

      - name: Run tests in Docker
        run: |
          docker run --rm ci-cd-calculator:test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64

      - name: Test Docker image locally
        run: |
          # Inicia container em background
          docker run -d -p 5000:5000 --name test-container ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

          # Aguarda inicialização
          sleep 10

          # Testa endpoints
          curl -f http://localhost:5000/ || exit 1
          curl -f http://localhost:5000/health || exit 1
          curl -f http://localhost:5000/soma/2/3 || exit 1
          curl -f http://localhost:5000/multiplica/4/5 || exit 1

          # Para container
          docker stop test-container
          docker rm test-container

      - name: Create release artifact
        run: |
          echo "Docker image published: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}" > docker-image-info.txt
          echo "SHA: ${{ github.sha }}" >> docker-image-info.txt
          echo "Build date: $(date)" >> docker-image-info.txt

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          files: |
            ./projeto.zip
            ./docker-image-info.txt
          generate_release_notes: true
          body: |
            ## Docker Image
            - **Image**: `${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}`
            - **SHA**: `${{ env.DOCKER_IMAGE }}:${{ github.sha }}`

            ## Como usar
            ```bash
            docker run -p 5000:5000 ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ```

            ## Endpoints
            - http://localhost:5000/ - API documentation
            - http://localhost:5000/health - Health check
            - http://localhost:5000/soma/2/3 - Sum operation
            - http://localhost:5000/multiplica/4/5 - Multiply operation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
